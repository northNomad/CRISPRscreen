which(geneSummary == "Clec5a")
geneSummary[order(geneSummary$Score), ]
geneSummary[order(geneSummary$Score, decreasing = TRUE)), ]
geneSummary[order(geneSummary$Score, decreasing = TRUE), ]
geneSummary[order(geneSummary$Score, decreasing = TRUE), ]  %>% head()
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
library(tidyverse)
library(plyr)
library(MAGeCKFlute)
fp_ivo <- file.path("./MageckAnalysis", "Gr1Positive.Ivo_vs_Gr1Neg.Ivo", "Gr1PosvsGr1Neg.Ivo.gene_summary.txt")
fp_dmso <- file.path("./MageckAnalysis", "Gr1Pos.DMSO_Gr1Neg.DMSO", "Gr1Pos.DMSO_Gr1Neg.DMSO.gene_summary.txt")
sum_ivo <- ReadRRA(gene_summary = fp_ivo, score = "rra")
sum_dmso <- ReadRRA(gene_summary = fp_dmso, score = "rra")
sum_ivo$LogFDR <- -log10(sum_ivo$FDR)
sum_dmso$LogFDR <- -log10(sum_dmso$FDR)
sum_ivo$Rank <- rank(sum_ivo$Score)
sum_dmso$Rank <- rank(sum_dmso$Score)
geneSummary
sum_ivo
sum_ivo <- sum_ivo[order(sum_ivo$Score, decreasing = T), ]
sum_ivo
sum_ivo %>% head()
sum_dmso <- sum_dmso[order(sum_dmso$Score, decreasing = T), ]
sum_dmso
sum_dmso %>% head()
intersect(sum_dmso$id[1:100], sum_ivo$id[1:100])
inner_join(sum_dmso, sum_ivo, by = id)
inner_join(sum_dmso, sum_ivo, by = "id")
inner_join(sum_dmso, sum_ivo, by = "id") %>% head)
inner_join(sum_dmso, sum_ivo, by = "id") %>% head()
inner_join(sum_dmso, sum_ivo, by = "id") %>%
ggplot(aes(Score.x, Score.y)) +
geom_point(alpha = 1/10)
library(ggforce)
library(ggrepel)
inner_join(sum_dmso, sum_ivo, by = "id") -> x
x %>%
ggplot(aes(Score.x, Score.y)) +
geom_point(alpha = 1/10) +
geom_label_repel(data = subset(x, id = "Clec5a"),
aes(Score.x, Score.y),
label = "Clec5a"
)
x %>%
ggplot(aes(Score.x, Score.y)) +
geom_point(alpha = 1/10) +
geom_label_repel(data = subset(x, id == "Clec5a"),
aes(Score.x, Score.y),
label = "Clec5a"
)
(x$Score.x)
sqrt((x$Score.x)^2 + (x$Score.y)^2)
sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.8
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.8]
outliers
x_su
x
which(x, id == "Clec5a")
which(x$id ==  "Clec5a")
x[3266, ]
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.3]
x %>%
ggplot(aes(Score.x, Score.y)) +
geom_point(alpha = 1/10) +
geom_label_repel(data = subset(x, id %in% outliers),
aes(Score.x, Score.y, label = id)
)
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.35]
x %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/10) +
geom_label_repel(data = subset(x, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
x %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/10) +
geom_text_repel(data = subset(x, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
file.path("../")
fp_tpm <- file.path("C:/Users/Alex Liu/Dropbox/Alex/RNASeq/IDH1Syk", "tpmavg.csv")
tpm <- read_csv(fp_tpm)
fp_tpm
tpm
rowSums(tpm[, 1:6])
rowSums(tpm[, 1:6]) >= 20
rowSums(tpm[, 1:6]) >= 100
tpm$SYMBOL[rowSums(tpm[, 1:6]) >= 20]
tpm_sub <- tpm$SYMBOL[rowSums(tpm[, 1:6]) >= 20]
tpm_sub <- tpm$SYMBOL[rowSums(tpm[, 1:6]) >= 20]
x %>%
subset(id %in% tpm_sub) %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/10) +
geom_text_repel(data = subset(x, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
tpm
which(tpm$SYMBOL == "Sema6a")
tpm[which(tpm$SYMBOL == "Sema6a"), ]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/10) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.35]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
tpm_sub <- tpm$SYMBOL[rowSums(tpm[, 1:6]) >= 100]
#####
sum_ivo <- ReadRRA(gene_summary = fp_ivo, score = "rra")
sum_dmso <- ReadRRA(gene_summary = fp_dmso, score = "rra")
sum_ivo$LogFDR <- -log10(sum_ivo$FDR)
sum_dmso$LogFDR <- -log10(sum_dmso$FDR)
sum_ivo$Rank <- rank(sum_ivo$Score)
sum_dmso$Rank <- rank(sum_dmso$Score)
sum_ivo <- sum_ivo[order(sum_ivo$Score, decreasing = T), ]
sum_dmso <- sum_dmso[order(sum_dmso$Score, decreasing = T), ]
#######
inner_join(sum_dmso, sum_ivo, by = "id") -> x
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.35]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
library(tidyverse)
library(plyr)
library(MAGeCKFlute)
library(ggforce)
library(ggrepel)
fp_ivo <- file.path("./MageckAnalysis", "Gr1Positive.Ivo_vs_Gr1Neg.Ivo", "Gr1PosvsGr1Neg.Ivo.gene_summary.txt")
fp_dmso <- file.path("./MageckAnalysis", "Gr1Pos.DMSO_Gr1Neg.DMSO", "Gr1Pos.DMSO_Gr1Neg.DMSO.gene_summary.txt")
fp_tpm <- file.path("C:/Users/Alex Liu/Dropbox/Alex/RNASeq/IDH1Syk", "tpmavg.csv")
tpm <- read_csv(fp_tpm)
tpm_sub <- tpm$SYMBOL[rowSums(tpm[, 1:6]) >= 100]
#####
sum_ivo <- ReadRRA(gene_summary = fp_ivo, score = "rra")
sum_dmso <- ReadRRA(gene_summary = fp_dmso, score = "rra")
sum_ivo$LogFDR <- -log10(sum_ivo$FDR)
sum_dmso$LogFDR <- -log10(sum_dmso$FDR)
sum_ivo$Rank <- rank(sum_ivo$Score)
sum_dmso$Rank <- rank(sum_dmso$Score)
sum_ivo <- sum_ivo[order(sum_ivo$Score, decreasing = T), ]
sum_dmso <- sum_dmso[order(sum_dmso$Score, decreasing = T), ]
#######
inner_join(sum_dmso, sum_ivo, by = "id") -> x
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4.35]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
) +
theme_minimal()
outliers <- x$id[sqrt((x$Score.x)^2 + (x$Score.y)^2) >= 4]
x.sub <- subset(x, id %in% tpm_sub)
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
) +
theme_minimal()
x.sub %>%
ggplot(aes(Score.y, Score.x)) +
geom_point(alpha = 1/5) +
geom_text_repel(data = subset(x.sub, id %in% outliers),
aes(Score.y, Score.x, label = id)
) +
theme_minimal() +
labs(y = "DMSO", x = "Ivosidenib")
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
x <- read.csv("gr1Positive.vs.Gr1Negative_Ivo.csv")
x
x[order(x$Score, decreasing = T), ]
c("LHFPL4", "LHFPL3", "EVX2", "NEUROD2", "ZIC2", "CELF6", "PAX2", "BDNF", "PAX5", "NRN1", "PRDM13", "OTP", "NEUROD1", "SALL1", "NR2E1", "TBX18", "TWIST1", "SIX2", "TFAP2D", "OBI1-AS1", "NKX2-2", "PHOX2B", "DBX1", "POU3F1", "OTX1", "ZIC5", "LOC642366", "VSX2", "TBR1", "EGR3", "POU3F2", "IRX1")
c("LHFPL4", "LHFPL3", "EVX2", "NEUROD2", "ZIC2", "CELF6", "PAX2", "BDNF", "PAX5", "NRN1", "PRDM13", "OTP", "NEUROD1", "SALL1", "NR2E1", "TBX18", "TWIST1", "SIX2", "TFAP2D", "OBI1-AS1", "NKX2-2", "PHOX2B", "DBX1", "POU3F1", "OTX1", "ZIC5", "LOC642366", "VSX2", "TBR1", "EGR3", "POU3F2", "IRX1") -> up
up
up %>% toString()
library(tidyverse)
up %>% toString()
library(stringr)
up %>% stringr::str_to_sentence()
up %>% stringr::str_to_sentence() -> up
up
x
x[x$id %in% up, ]
up
up %>% str_to_sentence()
up %>% toString()
up %>% toString() %>% gsub(pattern = ", ", replacement = ";")
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
# Load Packages -----------------------------------------------------------
suppressPackageStartupMessages({
library(shiny)
library(tidyverse)
library(RColorBrewer)
library(MAGeCKFlute)
library(CytoExploreR)
library(patchwork)
library(gt)
})
#Template
ui <- navbarPage("mIDH Project",
# Tab1 - Crispr Screen Result ---------------------------------------------
tabPanel(
"Crispr Screen Result - MAGeCK",
#HTML-----
withMathJax(),
tags$style(HTML("div.MathJax_Display{text-align: left !important;}")),
tags$style(HTML("img {border: 1; max-width: 100%; max-height: 100%;}")),
tags$style(HTML("element.style {width: 33.33%; height:33.33%;}")),
fluidRow(column(6, offset = 3, h3(tags$strong("Gr1+ vs Gr1- ~ In Ivosidenib")))),
#input & plot: genes sorted by rra-score
fluidRow(
column(4, tableOutput("table_TopGenes")),
column(6, plotOutput("TopGenes"))
),
fluidRow(
column(4,
sliderInput(
inputId = "n.TopGenes",
label = "Select #TopGenes For Display",
value = 5, min = 0, max = 50, step = 1
),
#Label a specific gene
textInput(
inputId = "label.Gene",
label = "Label a specific gene(s) - separate by ';' with no space",
value = ""
),
#Trigger by actionbutton
actionButton(inputId = "plotUpdate", label = "Update Plot"),
#query / find a gene using grep
textInput(inputId = "text.Gene", label = "Find the name of a gene"),
verbatimTextOutput("text.Gene_grepReturn"))
)
),
# Tab2 - Validation of Screen ---------------------------------------------
tabPanel(
"Clec5a",
navlistPanel(
"Experiments",
#Validation Experiment
tabPanel(
"Knockout Experiment",
fluidRow(
tags$div("Based on the result of our screen, we sought to validate Clec5a as a hit and investigate the consequences of its knockout at a deeper resolution."),
tags$hr(),
h3(tags$strong("Hypothesis: Clec5a knockout synergizes with Ivosidenib to promote OCI-mIDH1/NPM1 differentiation")),
),
fluidRow(
column(6, h4(tags$b("Fig1-a")), imageOutput("plot_summary", inline = TRUE)),
column(6, h4(tags$b("Fig1-b")), imageOutput("plot_clec5a_1D", inline = TRUE))
),
fluidRow(tags$hr()),
fluidRow(
column(8, h4(tags$b("Fig1-c")), imageOutput("plot_clec5a_gr1", height = "800px")),
column(
4,
tags$div(h4("Discussion: "),
h5("Flow cytometry confirms Clec5a knockouts' reduced expression of targeted gene (Fig1-b).",
"In addition, Clec5a knockouts express higher levels of myeloid differentiation marker Gr1 compared to nontarget control, both at baseline (DMSO-treated) and especially in the presence of Ivosidenib (Fig1-a,c)."),
tags$hr(),
"Fig1-a: Line connects mean %Gr1+ of experimental replicates (n=2) across DMSO and Ivosidenib treatment at day 7.")
)
)
),
#Cell Density Experiment
tabPanel(
"Cell Density Experiment",
fluidRow("Figures go here")
)
)
),
# Syk ---------------------------------------------------------------------
tabPanel(
"Syk",
),
# Tab N - Methods ---------------------------------------------------------
tabPanel(
"Methods",
tags$h1("Crispr/Cas9 mediated knockout via electroporation"),
tags$b("[Cas9 NLS] = 20 uM"),
tags$br(),
tags$b("[sgRNA] = 100 uM"),
tags$br(),
tags$b("[Nuclear Factor Solution (NFS)] = Prepared at manufacture's recommendation"),
uiOutput("nucleofection_recipe")
)
)
server <- function(input, output){
# Tab1 --------------------------------------------------------------------
#Load crispr screen result (Gr1+ vs Gr1- ~ In Ivosidenib)
sgRNA_summary <- MAGeCKFlute::ReadsgRRA("www/mageck/Gr1PositivevsGr1Neg.Ivo/Gr1PosvsGr1Neg.Ivo.sgrna_summary.txt")
gene_summary <- MAGeCKFlute::ReadRRA("www/mageck/Gr1PositivevsGr1Neg.Ivo/Gr1PosvsGr1Neg.Ivo.gene_summary.txt", score = "rra")
gene_summary$Rank <- rank(gene_summary$Score)
#Reactive arguments for making rra rank plot
top <- eventReactive(input$plotUpdate, {input$n.TopGenes})
toplabels <- eventReactive(input$plotUpdate, {input$label.Gene %>% str_split(pattern = ";") %>% unlist()})
output$table_TopGenes <- renderTable({
bind_rows(tail(gene_summary[order(gene_summary$Score), ], n = top()), head(gene_summary[order(gene_summary$Score), ], n = top()))
}
)
output$TopGenes <- renderPlot({
ScatterView(gene_summary, x = "Rank", y = "Score", label = "id", auto_cut_y = TRUE,
groups = c("top", "bottom"), top = top(), toplabels = toplabels(),
group_col = c("firebrick", "navy"), ylab = "MAGeCK RRA Score")
}
)
#find a gene using grep
text.Gene <- reactive({input$text.Gene %>% grep(gene_summary$id, ignore.case = TRUE, value = TRUE)})
output$text.Gene_grepReturn <- renderText({text.Gene()})
# Tab2 --------------------------------------------------------------------
output$plot_clec5a_1D <- renderImage({
f_path <- file.path("www/images/Clec5a/plot_clec5a_1D.png")
list(src = f_path)
}, deleteFile = FALSE)
output$plot_summary <- renderImage({
f_path <- file.path("www/images/Clec5a/plot_clec5a_summary.png")
list(src = f_path)
}, deleteFile = FALSE)
output$plot_clec5a_gr1 <- renderImage({
f_path <- file.path("www/images/Clec5a/clec5a_Gr1.png")
list(src = f_path)
}, deleteFile = FALSE)
# Tab Methods --------------------------------------------------------------------
output$nucleofection_recipe <- renderUI({
withMathJax(helpText("Prepare RNP complex by mixing $$1.5 uL Cas9 + 2.5 uL sgRNA + 21 uL NFS$$"))
})
}
shinyApp(ui = ui, server = server)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
# Load Packages -----------------------------------------------------------
suppressPackageStartupMessages({
library(shiny)
library(tidyverse)
library(RColorBrewer)
library(MAGeCKFlute)
library(CytoExploreR)
library(patchwork)
library(gt)
})
#Template
ui <- navbarPage("mIDH Project",
# Tab1 - Crispr Screen Result ---------------------------------------------
tabPanel(
"Crispr Screen Result - MAGeCK",
#HTML-----
withMathJax(),
tags$style(HTML("div.MathJax_Display{text-align: left !important;}")),
tags$style(HTML("img {border: 1; max-width: 100%; max-height: 100%;}")),
tags$style(HTML("element.style {width: 33.33%; height:33.33%;}")),
fluidRow(column(6, offset = 3, h3(tags$strong("Gr1+ vs Gr1- ~ In Ivosidenib")))),
#input & plot: genes sorted by rra-score
fluidRow(
column(4, tableOutput("table_TopGenes")),
column(6, plotOutput("TopGenes"))
),
fluidRow(
column(4,
sliderInput(
inputId = "n.TopGenes",
label = "Select #TopGenes For Display",
value = 5, min = 0, max = 50, step = 1
),
#Label a specific gene
textInput(
inputId = "label.Gene",
label = "Label a specific gene(s) - separate by ';' with no space",
value = ""
),
#Trigger by actionbutton
actionButton(inputId = "plotUpdate", label = "Update Plot"),
#query / find a gene using grep
textInput(inputId = "text.Gene", label = "Find the name of a gene"),
verbatimTextOutput("text.Gene_grepReturn"))
)
),
# Tab2 - Validation of Screen ---------------------------------------------
tabPanel(
"Clec5a",
navlistPanel(
"Experiments",
#Validation Experiment
tabPanel(
"Knockout Experiment",
fluidRow(
tags$div("Based on the result of our screen, we sought to validate Clec5a as a hit and investigate the consequences of its knockout at a deeper resolution."),
tags$hr(),
h3(tags$strong("Hypothesis: Clec5a knockout synergizes with Ivosidenib to promote OCI-mIDH1/NPM1 differentiation")),
),
fluidRow(
column(6, h4(tags$b("Fig1-a")), imageOutput("plot_summary", inline = TRUE)),
column(6, h4(tags$b("Fig1-b")), imageOutput("plot_clec5a_1D", inline = TRUE))
),
fluidRow(tags$hr()),
fluidRow(
column(8, h4(tags$b("Fig1-c")), imageOutput("plot_clec5a_gr1", height = "800px")),
column(
4,
tags$div(h4("Discussion: "),
h5("Flow cytometry confirms Clec5a knockouts' reduced expression of targeted gene (Fig1-b).",
"In addition, Clec5a knockouts express higher levels of myeloid differentiation marker Gr1 compared to nontarget control, both at baseline (DMSO-treated) and especially in the presence of Ivosidenib (Fig1-a,c)."),
tags$hr(),
"Fig1-a: Line connects mean %Gr1+ of experimental replicates (n=2) across DMSO and Ivosidenib treatment at day 7.")
)
)
),
#Cell Density Experiment
tabPanel(
"Cell Density Experiment",
fluidRow("Figures go here")
)
)
),
# Syk ---------------------------------------------------------------------
tabPanel(
"Syk",
),
# Tab N - Methods ---------------------------------------------------------
tabPanel(
"Methods",
tags$h1("Crispr/Cas9 mediated knockout via electroporation"),
tags$b("[Cas9 NLS] = 20 uM"),
tags$br(),
tags$b("[sgRNA] = 100 uM"),
tags$br(),
tags$b("[Nuclear Factor Solution (NFS)] = Prepared at manufacture's recommendation"),
uiOutput("nucleofection_recipe")
)
)
server <- function(input, output){
# Tab1 --------------------------------------------------------------------
#Load crispr screen result (Gr1+ vs Gr1- ~ In Ivosidenib)
sgRNA_summary <- MAGeCKFlute::ReadsgRRA("www/mageck/Gr1PositivevsGr1Neg.Ivo/Gr1PosvsGr1Neg.Ivo.sgrna_summary.txt")
gene_summary <- MAGeCKFlute::ReadRRA("www/mageck/Gr1PositivevsGr1Neg.Ivo/Gr1PosvsGr1Neg.Ivo.gene_summary.txt", score = "rra")
gene_summary$Rank <- rank(gene_summary$Score)
#Reactive arguments for making rra rank plot
top <- eventReactive(input$plotUpdate, {input$n.TopGenes})
toplabels <- eventReactive(input$plotUpdate, {input$label.Gene %>% str_split(pattern = ";") %>% unlist()})
output$table_TopGenes <- renderTable({
bind_rows(tail(gene_summary[order(gene_summary$Score), ], n = top()), head(gene_summary[order(gene_summary$Score), ], n = top()))
}
)
output$TopGenes <- renderPlot({
ScatterView(gene_summary, x = "Rank", y = "Score", label = "id", auto_cut_y = TRUE,
groups = c("top", "bottom"), top = top(), toplabels = toplabels(),
group_col = c("firebrick", "navy"), ylab = "MAGeCK RRA Score")
}
)
#find a gene using grep
text.Gene <- reactive({input$text.Gene %>% grep(gene_summary$id, ignore.case = TRUE, value = TRUE)})
output$text.Gene_grepReturn <- renderText({text.Gene()})
# Tab2 --------------------------------------------------------------------
output$plot_clec5a_1D <- renderImage({
f_path <- file.path("www/images/Clec5a/plot_clec5a_1D.png")
list(src = f_path)
}, deleteFile = FALSE)
output$plot_summary <- renderImage({
f_path <- file.path("www/images/Clec5a/plot_clec5a_summary.png")
list(src = f_path)
}, deleteFile = FALSE)
output$plot_clec5a_gr1 <- renderImage({
f_path <- file.path("www/images/Clec5a/clec5a_Gr1.png")
list(src = f_path)
}, deleteFile = FALSE)
# Tab Methods --------------------------------------------------------------------
output$nucleofection_recipe <- renderUI({
withMathJax(helpText("Prepare RNP complex by mixing $$1.5 uL Cas9 + 2.5 uL sgRNA + 21 uL NFS$$"))
})
}
shinyApp(ui = ui, server = server)
75*50
